import{d as r,f as n}from"./api-C2LmOsIF.js";class d{constructor(){this.chartInstances={},this.autoRefreshInterval=null,this.init()}init(){this.loadDashboardData(),this.initializeCharts(),this.loadRecentActivities(),this.setupAutoRefresh(),this.bindEvents()}async loadDashboardData(){try{const t=await r.getStats();this.updateStatistics(t)}catch(t){console.error("Failed to load dashboard stats:",t),this.showNotification("Gagal memuat data statistik","error"),this.updateStatistics({total_sppd:0,pending_approval:0,approved_sppd:0,total_budget:0})}}updateStatistics(t){const e={"total-sppd":t.total_sppd||0,"pending-approval":t.pending_approval||0,"approved-sppd":t.approved_sppd||0,"total-budget":t.total_budget||0};Object.entries(e).forEach(([a,i])=>{const o=document.getElementById(a);o&&(a==="total-budget"?o.textContent=n(i):o.textContent=i.toLocaleString("id-ID"),o.classList.add("fade-in"))})}async initializeCharts(){await this.loadMonthlyChart(),await this.loadStatusChart(),await this.loadBudgetChart()}async loadMonthlyChart(){try{const t=await r.getChartData("monthly");this.renderMonthlyChart(t)}catch(t){console.error("Failed to load monthly chart:",t),this.renderMonthlyChart({labels:["Jan","Feb","Mar","Apr","Mei","Jun"],values:[0,0,0,0,0,0]})}}async loadStatusChart(){try{const t=await r.getChartData("status");this.renderStatusChart(t)}catch(t){console.error("Failed to load status chart:",t),this.renderStatusChart({labels:["Approved","Pending","Rejected"],values:[0,0,0]})}}async loadBudgetChart(){try{const t=await r.getChartData("budget");this.renderBudgetChart(t)}catch(t){console.error("Failed to load budget chart:",t),this.renderBudgetChart({labels:["Jan","Feb","Mar","Apr","Mei","Jun"],values:[0,0,0,0,0,0]})}}renderMonthlyChart(t){const e=document.getElementById("monthlyChart");if(!e){console.warn("Monthly chart canvas not found");return}try{this.chartInstances.monthly&&this.chartInstances.monthly.destroy(),this.chartInstances.monthly=new Chart(e,{type:"line",data:{labels:t.labels||[],datasets:[{label:"SPPD per Bulan",data:t.values||[],borderColor:"#4F46E5",backgroundColor:"rgba(79, 70, 229, 0.1)",borderWidth:3,fill:!0,tension:.4,pointBackgroundColor:"#4F46E5",pointBorderColor:"#ffffff",pointBorderWidth:2,pointRadius:6}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1}},scales:{y:{beginAtZero:!0,grid:{color:"rgba(0, 0, 0, 0.1)"}},x:{grid:{display:!1}}},elements:{point:{hoverRadius:8}}}})}catch(a){console.error("Error rendering monthly chart:",a)}}renderStatusChart(t){const e=document.getElementById("statusChart");e&&(this.chartInstances.status&&this.chartInstances.status.destroy(),this.chartInstances.status=new Chart(e,{type:"doughnut",data:{labels:t.labels||[],datasets:[{data:t.values||[],backgroundColor:["#10B981","#F59E0B","#EF4444"],borderWidth:0,hoverOffset:4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{position:"bottom",labels:{padding:20,usePointStyle:!0}}}}}))}renderBudgetChart(t){const e=document.getElementById("budgetChart");e&&(this.chartInstances.budget&&this.chartInstances.budget.destroy(),this.chartInstances.budget=new Chart(e,{type:"bar",data:{labels:t.labels||[],datasets:[{label:"Budget (Rp)",data:t.values||[],backgroundColor:"rgba(79, 70, 229, 0.8)",borderColor:"#4F46E5",borderWidth:1,borderRadius:4,borderSkipped:!1}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1}},scales:{y:{beginAtZero:!0,ticks:{callback:function(a){return n(a)}},grid:{color:"rgba(0, 0, 0, 0.1)"}},x:{grid:{display:!1}}}}}))}setupAutoRefresh(){this.autoRefreshInterval=setInterval(()=>{this.loadDashboardData(),this.loadRecentActivities()},3e4)}async loadRecentActivities(){try{const t=await r.getRecentActivities();t&&t.length>0&&typeof updateRecentActivities=="function"&&updateRecentActivities(t)}catch(t){console.error("Failed to load recent activities:",t)}}bindEvents(){const t=document.getElementById("refreshDashboard");t&&t.addEventListener("click",()=>{this.refreshDashboard()});const e=document.getElementById("chartPeriod");e&&e.addEventListener("change",a=>{this.updateChartPeriod(a.target.value)})}async refreshDashboard(){const t=document.getElementById("refreshDashboard");t&&(t.disabled=!0,t.innerHTML='<i class="fas fa-spinner fa-spin"></i> Memuat...');try{await this.loadDashboardData(),await this.initializeCharts(),await this.loadRecentActivities(),this.showNotification("Dashboard berhasil diperbarui","success")}catch{this.showNotification("Gagal memperbarui dashboard","error")}finally{t&&(t.disabled=!1,t.innerHTML='<i class="fas fa-sync-alt"></i> Refresh')}}async updateChartPeriod(t){try{const e=await r.getChartData("monthly",{period:t});this.renderMonthlyChart(e)}catch(e){console.error("Failed to update chart period:",e)}}showNotification(t,e){const a=document.createElement("div");a.className=`notification notification-${e} fade-in`,a.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 24px;
            border-radius: 8px;
            z-index: 1000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        `,a.textContent=t,document.body.appendChild(a),setTimeout(()=>{a.remove()},5e3)}destroy(){this.autoRefreshInterval&&clearInterval(this.autoRefreshInterval),Object.values(this.chartInstances).forEach(t=>{t&&t.destroy()})}}document.addEventListener("DOMContentLoaded",()=>{try{document.querySelector(".dashboard-grid")&&(window.dashboardManager=new d)}catch(s){console.error("Error initializing dashboard:",s)}});window.addEventListener("beforeunload",()=>{try{window.dashboardManager&&window.dashboardManager.destroy()}catch(s){console.error("Error destroying dashboard:",s)}});
